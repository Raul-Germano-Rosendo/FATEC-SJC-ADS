from formulario.gerador_formulario import GeradorFormulario
from ia.ollama_service import OllamaService
from utils.arquivo_utils import listar_arquivos_json, carregar_json
import os
import subprocess
import time
import sys

def verificar_processo_ollama():
    """Verifica se o Ollama j√° est√° em execu√ß√£o"""
    try:
        # Comandos para verificar processos em diferentes sistemas operacionais
        if os.name == 'nt':  # Windows
            result = subprocess.run(['netstat', '-ano'], capture_output=True, text=True)
            return ':11434' in result.stdout
        else:  # Linux/Mac
            result = subprocess.run(['lsof', '-i', ':11434'], capture_output=True, text=True)
            return result.returncode == 0
    except:
        return False

def iniciar_ollama():
    """Tenta iniciar o Ollama"""
    print("üîÑ Tentando iniciar o Ollama...")
    
    try:
        if os.name == 'nt':  # Windows
            subprocess.Popen(['ollama', 'serve'], 
                           creationflags=subprocess.CREATE_NO_WINDOW)
        else:  # Linux/Mac
            subprocess.Popen(['ollama', 'serve'], 
                           stdout=subprocess.DEVNULL, 
                           stderr=subprocess.DEVNULL)
        
        # Aguardar o Ollama inicializar
        time.sleep(3)
        return True
    except FileNotFoundError:
        print("‚ùå Ollama n√£o est√° instalado ou n√£o est√° no PATH.")
        print("üì• Instale em: https://ollama.ai")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao iniciar Ollama: {e}")
        return False

def main():
    # Configura√ß√µes
    PASTA_FORMULARIOS = "data/formularios_gerados"
    NUMERO_FORMULARIOS = 3
    
    # Criar inst√¢ncias
    gerador = GeradorFormulario()
    ollama_service = OllamaService()
    
    print("=== SISTEMA DE GERADOR DE FORMUL√ÅRIOS E DIAGN√ìSTICOS ===")
    print()
    
    # Gerar formul√°rios
    print(f"üìã Gerando {NUMERO_FORMULARIOS} formul√°rios com respostas aleat√≥rias...")
    print()
    
    gerador.gerar_multiplos_formularios(NUMERO_FORMULARIOS, PASTA_FORMULARIOS)
    
    print()
    print("‚úÖ Formul√°rios gerados com sucesso!")
    print()
    
    # Listar formul√°rios gerados
    arquivos_formularios = listar_arquivos_json(PASTA_FORMULARIOS)
    
    if not arquivos_formularios:
        print("‚ÑπÔ∏è  Nenhum formul√°rio encontrado.")
        return
    
    print("üìÑ Formul√°rios dispon√≠veis para an√°lise:")
    for i, arquivo in enumerate(arquivos_formularios, 1):
        print(f"{i}. {os.path.basename(arquivo)}")
    
    print()
    
    # Verificar conex√£o com Ollama
    print("üîç Verificando conex√£o com Ollama...")
    
    if ollama_service.testar_conexao():
        print("‚úÖ Conex√£o com Ollama estabelecida!")
    else:
        print("‚ùå N√£o foi poss√≠vel conectar ao Ollama.")
        print("\nüí° Poss√≠veis solu√ß√µes:")
        print("1. Verifique se o Ollama est√° instalado (https://ollama.ai)")
        print("2. Execute 'ollama serve' em outro terminal")
        print("3. Feche outras inst√¢ncias do Ollama que podem estar rodando")
        
        if verificar_processo_ollama():
            print("\n‚ö†Ô∏è  Foi detectado um processo usando a porta 11434.")
            escolha = input("Deseja tentar reiniciar o Ollama? (s/n): ").lower()
            if escolha == 's':
                if iniciar_ollama():
                    print("üîÑ Aguardando inicializa√ß√£o...")
                    time.sleep(5)
                else:
                    print("‚ùå N√£o foi poss√≠vel iniciar o Ollama.")
                    return
            else:
                print("‚ÑπÔ∏è  Continuando sem Ollama.")
                return
        else:
            escolha = input("Deseja tentar iniciar o Ollama? (s/n): ").lower()
            if escolha == 's':
                if iniciar_ollama():
                    print("üîÑ Aguardando inicializa√ß√£o...")
                    time.sleep(5)
                else:
                    print("‚ùå N√£o foi poss√≠vel iniciar o Ollama.")
                    return
            else:
                print("‚ÑπÔ∏è  Continuando sem Ollama.")
                return
    
    # Verificar novamente ap√≥s tentativa de conex√£o
    if not ollama_service.testar_conexao():
        print("‚ùå Ainda n√£o foi poss√≠vel conectar ao Ollama.")
        print("‚ÑπÔ∏è  Os formul√°rios foram gerados, mas n√£o ser√° poss√≠vel gerar diagn√≥sticos.")
        return
    
    # Oferecer op√ß√£o de gerar diagn√≥stico
    escolha = input("\nü§ñ Deseja gerar um diagn√≥stico para um formul√°rio? (s/n): ").lower()
    
    if escolha == 's':
        try:
            num_arquivo = int(input(f"üî¢ Digite o n√∫mero do formul√°rio (1-{len(arquivos_formularios)}): ")) - 1
            if 0 <= num_arquivo < len(arquivos_formularios):
                arquivo_selecionado = arquivos_formularios[num_arquivo]
                formulario = carregar_json(arquivo_selecionado)
                
                print()
                print("üß† Gerando diagn√≥stico com Ollama...")
                print("‚è≥ Isso pode levar alguns instantes...")
                print()
                
                # Gerar diagn√≥stico
                diagnostico = ollama_service.gerar_diagnostico(formulario)
                
                print("=" * 50)
                print("üìä DIAGN√ìSTICO GERADO")
                print("=" * 50)
                print(diagnostico)
                print("=" * 50)
                print()
                
                # Oferecer para salvar o diagn√≥stico
                salvar = input("üíæ Deseja salvar este diagn√≥stico? (s/n): ").lower()
                if salvar == 's':
                    nome_base = os.path.splitext(os.path.basename(arquivo_selecionado))[0]
                    caminho_diagnostico = os.path.join(PASTA_FORMULARIOS, f"{nome_base}_diagnostico.txt")
                    
                    with open(caminho_diagnostico, 'w', encoding='utf-8') as f:
                        f.write(diagnostico)
                    
                    print(f"‚úÖ Diagn√≥stico salvo em: {caminho_diagnostico}")
            else:
                print("‚ùå N√∫mero inv√°lido.")
        except ValueError:
            print("‚ùå Entrada inv√°lida. Digite um n√∫mero.")
    else:
        print("‚ÑπÔ∏è  Opera√ß√£o cancelada.")

if __name__ == "__main__":
    main()